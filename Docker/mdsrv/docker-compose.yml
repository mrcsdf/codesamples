version: "3.8"

networks:
  t2_proxy:
    external: true
    name: t2_proxy

services:

  watchtower:
    container_name: watchtower
    hostname: watchtower
    networks:
      - t2_proxy
    restart: always
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=false
      - WATCHTOWER_REMOVE_VOLUMES=false
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_INCLUDE_RESTARTING=false
      - WATCHTOWER_NO_STARTUP_MESSAGR=false
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_NOTIFICATIONS_LEVEL=debug
      - WATCHTOWER_DEBUG=true

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    hostname: movies
    networks:
      - t2_proxy
    links:
      - hydra:hydra
    # ports:
    #   - "7878:7878/tcp"
    depends_on:
      - traefik
      - get
      - hydra
      - pihole
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${docker_dir}/radarr:/config
      - ${data_dir}/downloads/usenet/complete/movies:/data/usenet/complete/movies
      - ${data_dir}/media/movies:/movies
    restart: unless-stopped

  sonarr:
    image: linuxserver/sonarr:latest
    hostname: sonarr
    container_name: sonarr
    volumes:
      - ${docker_dir}/sonarr:/config
      - ${data_dir}/media/tvshows:/tvshows
      - ${data_dir}/downloads:/data
    networks:
      - t2_proxy
    links:
      - hydra:hydra
    depends_on:
      - traefik
      - get
      - hydra
      - pihole

    # ports:
    #   - target: 8989
    #     published: 8989
    #     protocol: tcp
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=002
      - TZ=${TZ}

  reader:
    image: linuxserver/readarr:nightly
    container_name: readarr
    hostname: readarr
    depends_on:
      - get
      - hydra
      # - deluge
      # - jackett
      - traefik
      - pihole
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${docker_dir}/readarr:/config
      - ${data_dir}/media/books:/books
      - ${data_dir}/downloads:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - t2_proxy
    # ports:
    #   - 8787:8787/tcp
    #dns: pihole
    restart: unless-stopped

  get:
    image: linuxserver/nzbget:latest
    hostname: get
    container_name: get
    restart: always
    depends_on:
      - traefik
      - pihole
    volumes:
      - ${docker_dir}/get:/config
      - ${data_dir}/downloads:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - t2_proxy
    # ports:
    #   - target: 6789
    #     published: 6790
    #     protocol: tcp
    #     mode: host

  hydra:
    image: linuxserver/nzbhydra2:dev
    container_name: hydra
    hostname: hydra
    depends_on:
      - traefik
      - pihole
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${docker_dir}/hydra:/config
      - ${data_dir}/downloads:/downloads
    networks:
      - t2_proxy
    #dns: pihole
    # ports:
    #   - 5076:5076/tcp
    restart: unless-stopped

  plexms:
    image: linuxserver/plex:latest
    container_name: plex
    hostname: plex
    depends_on:
      - traefik
      - pihole
    networks:
      - t2_proxy
    ports:
      - target: 32400
        published: 32400
      - target: 1900
        published: 1900
        protocol: udp
      - target: 3005
        published: 3005
      - target: 5353
        published: 5354
        protocol: udp
      - target: 8324
        published: 8324
      - target: 32410
        published: 32410
        protocol: udp
      - target: 32412
        published: 32412
        protocol: udp
      - target: 32413
        published: 32413
        protocol: udp
      - target: 32414
        published: 32414
        protocol: udp
      - target: 32469
        published: 32469
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - PLEX_CLAIM=claim-XuUyxZrxfu7qYfsxsxZ4
    volumes:
      - ${data_dir}\media:/media
      - ${docker_dir}\plex:/config
    restart: always

  calibre:
    image: linuxserver/calibre:latest
    container_name: calibre
    hostname: calibre
    depends_on:
      - traefik
      - pihole
    networks:
      - t2_proxy
    #dns: pihole
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - PASSWORD=
      # - CLI_ARGS=
    volumes:
      - "${data_dir}/media/books:/config/Calibre Library"
      - ${data_dir}/downloads:/export
      - ${docker_dir}/calibre:/config
    restart: unless-stopped

  pihole:
    container_name: pihole
    hostname: pihole
    depends_on:
      - traefik
    # build: ${docker_dir}/pihole
    image: jacklul/pihole:latest # pihole/pihole:latest
    networks:
      - t2_proxy
    #dns: pihole
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 82:80/tcp
      - 67:67/tcp
      - 444:443/tcp
    dns:
      - 127.0.0.1
      - 1.1.1.1
    environment:
      TZ: ${TZ}
      WEBPASSWORD: "LKFern13!" # WEBPASSWORD_FILE: /run/secrets/piholeadmin
      # ServerIP: 192.168.86.37
      # DNS2: 1.1.1.1
      # DNS3: 1.0.0.1
    # Volumes store your data between container upgrades
    volumes:
      - '${docker_dir}/pihole/config:/etc/pihole/'
      - '${docker_dir}/pihole/dns_config:/etc/dnsmasq.d/'
      - '${docker_dir}/pihole/etc-updatelists/:/etc/pihole-updatelists'
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker- i-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: always
    # secrets:
    #   - piholeadmin


   # External dependencies

  dozzle:
    container_name: dozzle
    hostname: logs
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - t2_proxy
    depends_on:
      - traefik
      - pihole

  home:
    image: linuxserver/heimdall:latest
    hostname: home
    container_name: home
    depends_on:
      - traefik
      - pihole
    networks:
      - t2_proxy
    # depends_on:
      # - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${docker_dir}/heimdall:/config
    
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    hostname: proxy
    networks:
      - t2_proxy
    #dns: pihole
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 8080
        published : 8000
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${docker_dir}\traefik2\traefik.yml:/traefik.yml:ro
      - ${docker_dir}\traefik2\acme\acme.json:/acme/acme.json:rw
      - ${docker_dir}\traefik2\rules:/rules:ro
      - ${docker_dir}\traefik2\certs:/certs
      #  If I want logs ported out
      - ${docker_dir}\traefik2\logs:/var/log:rw
      - ${docker_dir}\traefik2\.htpasswd:/traefik/.htpasswd
    environment:
      - TZ=${TZ}
      
  # wireguard:
  #   image: linuxserver/wireguard:amd64-latest
  #   container_name: wireguard
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #   env_file:
  #     - .env
  #   volumes:
  #     - /path/to/appdata/config:/config
  #     - /lib/modules:/lib/modules
  #   ports:
  #     - 51820:51820/udp
  #   sysctls:
  #     - net.ipv4.conf.all.src_valid_mark=1
  #   restart: unless-stopped